{"version":3,"sources":["Components/NavBar.js","Components/Home.js","Components/Login.js","Components/Grupos.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Home","Login","Grupos","App","useState","docs","setDocs","err","setErr","useEffect","HOST","window","location","origin","replace","ws","WebSocket","onopen","console","log","onmessage","msg","JSON","parse","data","fetch","then","res","json","stringify","path","component","exact","map","d","key","name","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wPAqBeA,EAjBD,WACZ,OACI,6BACE,yBAAKC,UAAU,iDACf,wBAAIA,UAAU,gBAAe,kBAAC,IAAD,CAAMC,GAAG,KAAT,kBAC7B,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,sBAAsBC,gBAAc,qBAAqBC,gBAAc,QAAQC,aAAW,sBAE9K,wBAAIP,UAAU,gBAAe,kBAAC,IAAD,CAAMC,GAAG,WAAT,WAC7B,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,sBAAsBC,gBAAc,qBAAqBC,gBAAc,QAAQC,aAAW,sBAE9K,wBAAIP,UAAU,gBAAe,kBAAC,IAAD,CAAMC,GAAG,UAAT,UAC7B,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,sBAAsBC,gBAAc,qBAAqBC,gBAAc,QAAQC,aAAW,yB,OCLvKC,EAPH,WACV,OACI,6BACE,wDCIOC,EAPF,WACX,OACI,6BACE,yDCOOC,EAVD,WAIZ,OACI,6BACE,0DC2EOC,MA5Ef,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAESF,mBAAS,IAFlB,mBAENG,EAFM,KAEDC,EAFC,KAiCb,OA7BAC,qBAAU,WACR,IAAIC,EAAOC,OAAOC,SAASC,OAAOC,QAAQ,QAAS,MAC/CC,EAAK,IAAIC,UAAUN,GAGvBK,EAAGE,OAAS,WACVC,QAAQC,IAAI,mBAEZJ,EAAGK,UAAY,SAAAC,GACbf,EAAQgB,KAAKC,MAAMF,EAAIG,OACvBN,QAAQC,IAAI,cAAcE,KAI9BI,MAAM,QACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAM,SAAAF,GACFA,EAAKjB,IACNC,EAAOc,KAAKO,UAAUL,EAAKH,MAG3Bf,EAAQkB,QAGd,IAMA,kBAAC,IAAD,KACA,kBAAC,IAAD,KACA,yBAAKhC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOsC,KAAK,IAAIC,UAAY/B,EAAMgC,OAAK,IACvC,kBAAC,IAAD,CAAOF,KAAK,UAAUC,UAAY7B,IAClC,kBAAC,IAAD,CAAO4B,KAAK,SAASC,UAAY9B,IAEnC,yBAAKT,UAAU,OAEb,yCACA,6BAAMe,GAfeF,EAAK4B,KAAI,SAAAC,GAAC,OAAI,yBAAKC,IAAKD,EAAEE,MAAOF,EAAEE,KAArB,aC1BrBC,QACW,cAA7B1B,OAAOC,SAAS0B,UAEe,UAA7B3B,OAAOC,SAAS0B,UAEhB3B,OAAOC,SAAS0B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.4b582871.chunk.js","sourcesContent":["import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link, withRouter } from \"react-router-dom\";\r\n\r\n\r\nconst NavBar =()=>{\r\n  return(\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <li className=\"navbar-brand\"><Link to=\"/\">Tu Mejor Ruta</Link></li>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        </button>\r\n        <li className=\"navbar-brand\"><Link to=\"/grupos\">Grupos</Link></li>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        </button>\r\n        <li className=\"navbar-brand\"><Link to=\"/login\">Login</Link></li>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        </button>\r\n    </nav>\r\n      </div>\r\n    )\r\n}\r\nexport default NavBar;","import React from 'react';\r\n\r\n\r\nconst Home =()=>{\r\n  return(\r\n      <div>\r\n        <h1>Se esta mostrando Home</h1>\r\n      </div>\r\n    )\r\n}\r\nexport default Home;","import React from 'react';\r\n\r\n\r\nconst Login =()=>{\r\n  return(\r\n      <div>\r\n        <h1>Se esta mostrando Login</h1>\r\n      </div>\r\n    )\r\n}\r\nexport default Login;","import React from 'react';\r\n\r\n\r\nconst Grupos =()=>{\r\n\t\r\n\t\r\n\t\r\n  return(\r\n      <div>\r\n        <h1>Se esta mostrando Grupos</h1>\r\n      </div>\r\n    )\r\n}\r\nexport default Grupos;","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport NavBar from './Components/NavBar'\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\r\nimport Home from './Components/Home'\r\nimport Login from './Components/Login'\r\nimport Grupos from './Components/Grupos'\r\n\r\nfunction App() {\r\n  const [docs, setDocs] = useState([]);\r\n  const [err, setErr] = useState(\"\");\r\n\r\n  useEffect(()=> {\r\n    let HOST = window.location.origin.replace(/^http/, 'ws');\r\n    let ws = new WebSocket(HOST);\r\n\r\n    //const ws = new WebSocket(\"ws://localhost:3001\");\r\n    ws.onopen = () => {\r\n      console.log(\"Connected to ws\");\r\n\r\n      ws.onmessage = msg => {\r\n        setDocs(JSON.parse(msg.data));\r\n        console.log(\"Got ws data\",msg);\r\n      };\r\n    };\r\n\r\n    fetch(\"data\")\r\n      .then(res => res.json())\r\n      .then( data => {\r\n        if(data.err) {\r\n          setErr(JSON.stringify(data.msg));\r\n        }\r\n        else{\r\n          setDocs(data);\r\n        }\r\n      });\r\n  },[]);\r\n\r\n  const renderDocs = () => docs.map(d => <div key={d.name}>{d.name} </div>)\r\n\r\n\r\n  return (\r\n    <Router>\r\n    <Switch>\r\n    <div className=\"App\">\r\n      <NavBar/>\r\n      <Route path='/' component ={Home} exact/>\r\n      <Route path='/grupos' component ={Grupos}/>\r\n      <Route path='/login' component ={Login}/>\r\n\r\n    <div className=\"App\">\r\n\r\n      <h1>Reacctive</h1>\r\n      <div>{err}</div>\r\n      {renderDocs()}\r\n    </div>\r\n    </div>\r\n    </Switch>\r\n    </Router>\r\n  )\r\n}\r\nfunction Gruposs(){\r\n  return(\r\n    <div>\r\n      <Grupos/>\r\n    </div>\r\n  );\r\n};\r\nfunction Loginn(){\r\n  return(\r\n    <div>\r\n      <Login/>\r\n    </div>\r\n  );\r\n};\r\nfunction Homee(){\r\n  return(\r\n    <div>\r\n      <Home/>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}